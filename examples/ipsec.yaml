tosca_definitions_version: cloudify_dsl_1_3

imports:
  - include/imports.yaml

inputs:
    versa_url:
        default: "https://172.19.0.210:9183"
    client_id:
        default: "voae_rest"
    client_secret:
        default: "asrevnet_123"
    username:
        default: "Administrator"
    password:
        default: "versa123"
    appliance_name:
      default: ipsec
    org_name:
        default: vcpe1_parent_org
    use_exsisting_appliance:
        default: true
    pool_name: 
        default: vcpe1_tdcpool
    pool_ip: 
        default: 192.168.200.205
    cms_org_name: 
        default: vcpe1_tdccms
    external_network_name:
        default: vlan100
    external_interface_name:
      default: vni-0/0 
    hq_network_name:
        default: vcpe1_hq_network
    hq_interface_name: 
      default: vni-0/1
    tunnel_interface_name: 
      default: tvi-0/0
    hq_router_name: 
        default:  hq_router
    external_router_name: 
        default: external_router
    unit:
        default: 0
    dhcp_profile_name:
        default: dhcp_profile
    dhcp_lease_profile_name:
        default: dhcp_lease_profile
    dhcp_options_profile_name:
        default: dhcp_options_profile
    branch_domain_name:
        default: branch.org
    dns_server: 
        default: 8.8.8.8
    dhcp_pool_mask: 
        default: 255.255.255.0
    branch1_dhcp_begin_address: 
        default: 10.11.0.100
    branch1_dhcp_end_address: 
        default: 10.11.0.200
    created_by_appliance:
        default: true
    hq_range_low: 
        default: 87.53.87.1
    hq_range_high: 
        default: 87.53.87.4
    hq_nat_rule_source_address: 
        default: 10.11.0.0/24


node_templates:
  #####################
  # Versa config
  #####################
  versa_configuration:
    type: cloudify.versa.nodes.versa_configuration
    properties:
      versa_config:
        username: { get_input: username }
        password: { get_input: password }
        versa_url: { get_input: versa_url}
        client_id: { get_input: client_id}
        client_secret: { get_input: client_secret}

  #####################
  # CMS config
  #####################
  resource_pool:
    type: cloudify.versa.nodes.ResourcePool
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      use_existing: { get_input : use_exsisting_appliance }
    relationships:
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            instance:
              name: { get_input: pool_name }
              ip-address: { get_input: pool_ip }

  cms_organization:
    type: cloudify.versa.nodes.CMSLocalOrganization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      use_existing: { get_input : use_exsisting_appliance }
      organization:
        name: { get_input: cms_org_name }
        resource-pool:
          instances: 
            - { get_input: pool_name }
        org-networks:
          org-network:
            - name: { get_input: external_network_name }
              ipaddress-allocation-mode: manual
    relationships:
      - type: cloudify.versa.cms_org_connected_to_pool
        target: resource_pool

  #####################
  # NMS organizations
  #####################
  organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      use_existing: { get_input : use_exsisting_appliance }
      organization:
        name: { get_input: org_name }
        parent-org: none
        subscription-plan: Default-All-Services-Plan
        cms-orgs: 
            name: { get_input: cms_org_name }
            cms-connector: local
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization

  #####################
  # Appliance configuration
  #####################
  appliance:
    type: cloudify.versa.nodes.Appliance
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      #use_existing: { get_input : use_exsisting_appliance }
      device:
        name: { get_input: appliance_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            device:
              mgmt-ip: { get_input: pool_ip }
              name: { get_input: appliance_name }
              org: { get_input: org_name }
              cmsorg: { get_input: cms_org_name }
              type: service-vnf
              networking-info:
                  - network-info:
                      network-name: { get_input: external_network_name }
                      interface: { get_input: external_interface_name }
                      ip-address: 87.53.86.10
              snglist:
                  - sng:
                      name: Default_All_Services
                      isPartOfVCSN: true
                      services:
                          - cgnat
                          - nextgen-firewall
                          - ipsec
                          - sdwan
              subscription:
                  solution-tier: nextgen-firewall
                  bandwidth: 100
                  is-analytics-enabled: true
    relationships:
      - type: cloudify.versa.organization_connected_to_appliance
        target: organization
          
  #####################
  # Interface configuration
  #####################
  hq_interface:
    type: cloudify.versa.nodes.Interface
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      interface:
        name: { get_input: hq_interface_name }
        enable: true
        promiscuous: false
        unit:
          - name: 0
            family:
                inet:
                  address:
                    addr: 10.11.0.2/24
    relationships:
      - type: cloudify.relationships.depends_on
        target: appliance

  external_interface:
    type: cloudify.versa.nodes.Interface
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      use_existing: { get_input : created_by_appliance }
      appliance_name: { get_input: appliance_name }
      interface:
        name: { get_input: external_interface_name }
        enable: true
        promiscuous: false
        unit:
          - name: 0
            family:
                inet:
                  address:
                    addr: 87.53.86.10/30
    relationships:
      - type: cloudify.relationships.depends_on
        target: appliance


  tunnel_interface:
    type: cloudify.versa.nodes.Interface
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      interface:
        name: { get_input: tunnel_interface_name }
        enable: true
        mode: ipsec
        type: ipsec
        mtu: 1400
        unit:
          - name: 0
            enable: true
            family:
                inet:
                  address:
                    addr: 11.11.11.63/24
    relationships:
      - type: cloudify.relationships.depends_on
        target: appliance


  #####################
  # Network configuration
  #####################
  external_network:
    type: cloudify.versa.nodes.Network
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      use_existing: { get_input : created_by_appliance }
      network:
        name: { get_input: external_network_name }
        interfaces: 
          - { concat: [get_input: external_interface_name, ".", get_input: unit] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: external_interface
          
  hq_network:
    type: cloudify.versa.nodes.Network
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      network:
        name: { get_input: hq_network_name }
        interfaces: 
          - { concat: [get_input: hq_interface_name, ".", get_input: unit] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: hq_interface

  #####################
  # Routing configuration
  #####################
  hq_router:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      router:
        name: { get_input: hq_router_name }
        instance-type: virtual-router
        networks:
          - { get_input: hq_network_name }
        interfaces:
          - { concat: [get_input: tunnel_interface_name, ".", get_input: unit] }
        routing-options:
          static:
            route:
              rti-static-route-list:
                - ip-prefix: 192.168.65.0/24
                  next-hop: 11.11.11.1
                  preference: 1
                  tag: 0
                  interface: none
    relationships:
      - type: cloudify.relationships.depends_on
        target: hq_network
      - type: cloudify.relationships.depends_on
        target: tunnel_interface

  external_router:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      router:
        name: { get_input: external_router_name }
        instance-type: virtual-router
        networks:
          - { get_input: external_network_name }
        routing-options:
          static:
            route:
              rti-static-route-list:
                - ip-prefix: 0.0.0.0/0
                  next-hop: 87.53.86.9
                  preference: 1
                  tag: 0
                  interface: none
    relationships:
      - type: cloudify.relationships.depends_on
        target: external_network

  #####################
  # Limits configuration
  #####################
  dhcp_profile:
    type: cloudify.versa.nodes.DHCPProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      profile_name: { get_input: dhcp_profile_name }
      organizations:
        - { get_input: org_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: appliance


  limits:
    type: cloudify.versa.nodes.Limits
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      dhcp_profile: { get_input: dhcp_profile_name }
      routes:
        - { get_input: hq_router_name}
        - { get_input: external_router_name}
      networks:
          - { get_input: hq_network_name }
          - { get_input: external_network_name }
      interfaces:
          - { concat: [get_input: tunnel_interface_name, ".", get_input: unit] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: hq_router
      - type: cloudify.relationships.depends_on
        target: external_router
      - type: cloudify.relationships.depends_on
        target: dhcp_profile
      - type: cloudify.relationships.depends_on
        target: tunnel_interface

  #####################
  # VPN configuration
  #####################

  vpn_profile:
    type: cloudify.versa.nodes.VPNProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      profile:
        name: vpn_profile
        vpn-type: site-to-site
        tunnel-initiate: automatic
        hardware-accelerator: any
        routing-instance: { get_input: external_router_name}
        tunnel-routing-instance: { get_input: hq_router_name}
        tunnel-interface: { concat: [get_input: tunnel_interface_name, ".", get_input: unit] }
        local-auth-info:
            auth-type: psk
            id-string: 87.53.86.10
            id-type: ip
            key: versa123
        peer-auth-info:
            auth-type: psk
            id-type: ip
            key: versa123
            id-string: 87.53.86.14
        ipsec:
            fragmentation: pre-fragmentation
            force-nat-t: disable
            mode: tunnel
            pfs-group: mod-none
            anti-replay: disable
            transform: esp-aes128-sha1
            keepalive-timeout: 10
        ike:
            version: v2
            group: mod2
            transform: aes128-sha1
            lifetime: 28800
            dpd-timeout: 30
        local:
            inet: 87.53.86.10
        peer:
            inet: 87.53.86.14
    relationships:
      - type: cloudify.relationships.depends_on
        target: limits

  #####################
  # DHCP configuration
  #####################
  dhcp_lease_profile:
    type: cloudify.versa.nodes.DHCPLeaseProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: limits

  dhcp_options_profile:
    type: cloudify.versa.nodes.DHCPOptionsProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      name: { get_input: dhcp_options_profile_name }
      domain: { get_input: branch_domain_name }
      servers:
        - { get_input: dns_server }
    relationships:
      - type: cloudify.relationships.depends_on
        target: limits

  dhcp_global_configuration:
    type: cloudify.versa.nodes.DHCPGlobalConfiguration
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      dhcp_profile: { get_input: dhcp_profile_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile: { get_input: dhcp_options_profile_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: dhcp_lease_profile
      - type: cloudify.relationships.depends_on
        target: dhcp_options_profile

  dhcp_pool:
    type: cloudify.versa.nodes.DHCPPool
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile: { get_input: dhcp_options_profile_name }
      name: branch_pool
      mask: { get_input: dhcp_pool_mask }
      range_name: branch_range 
      begin_address: { get_input: branch1_dhcp_begin_address }
      end_address: { get_input: branch1_dhcp_end_address }
    relationships:
      - type: cloudify.relationships.depends_on
        target: dhcp_global_configuration
      - type: cloudify.relationships.depends_on
        target: limits
      - type: cloudify.relationships.depends_on
        target: dhcp_lease_profile
      - type: cloudify.relationships.depends_on
        target: dhcp_options_profile

  dhcp_server:
    type: cloudify.versa.nodes.DHCPServer
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile: { get_input: dhcp_options_profile_name }
      pool_name: branch_pool
      name: branch_dhcp_server
      networks:
        - {get_input: hq_network_name }
    relationships:
      - type: cloudify.versa.dhcp_connected_to_profile
        target: dhcp_pool
  
  #####################
  # NAT configuration
  #####################
  hq_nat:
    type: cloudify.versa.nodes.CGNat
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      pool:
        name: hq_nat_pool
        ranges:
          - name: hq_pool_range
            low: { get_input: hq_range_low }
            hight: { get_input: hq_range_high }
        routing_instance: { get_input: external_router_name }
        provider_org: []
      rule:
        name: hq_nat_rule
        addresses:
          - { get_input: hq_nat_rule_source_address }
    relationships:
      - type: cloudify.versa.cgnat_connected_to_routing
        target: hq_router
      - type: cloudify.relationships.depends_on
        target: limits

