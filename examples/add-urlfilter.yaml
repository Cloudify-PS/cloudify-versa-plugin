tosca_definitions_version: cloudify_dsl_1_3

imports:
  - include/imports.yaml

inputs:
    versa_url:
        default: "https://172.19.0.210:9183"
    client_id:
        default: "voae_rest"
    client_secret:
        default: "asrevnet_123"
    username:
        default: "Administrator"
    password:
        default: "versa123"
    appliance_name:
      default: ipsec
    org_name:
        default: LEGO
    external_router_name: 
        default: external_router
    external_network_name:
        default: vlan100
    hq_network_name:
        default: vcpe1_hq_network
    firewall_policy_name:
      default: firewall_policy
    firewall_rule_name:
      default: block_youtube_rule
    firewall_filter_name:
      default: block_youtube_filter
    filter_string:
      default: .*youtube.*
    hq_router_name: 
        default:  hq_router

node_templates:

  #####################
  # Versa config
  #####################
  versa_configuration:
    type: cloudify.versa.nodes.versa_configuration
    properties:
      versa_config:
        username: { get_input: username }
        password: { get_input: password }
        versa_url: { get_input: versa_url}
        client_id: { get_input: client_id}
        client_secret: { get_input: client_secret}
  

 #####################
 # Firewall configuration
 #####################
  hq_url_filter:
    type: cloudify.versa.nodes.NGFirewallUrlFilter
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      filters:
        - name: { get_input: firewall_filter_name }
          description: test
          default-action:
             predefined: allow
          cloud-lookup-mode: never
          category-action-map:
             category-action: []
          reputation-action-map:
             reputation-action: []
          blacklist:
             action:
               predefined: block
             patterns:
               - { get_input: filter_string }
          whitelist: {}

  captive_portal:
    type: cloudify.versa.nodes.CaptivePortal
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      captive_portal:
        port: 8888
        track-by-host: false
        expiration-time: 30
        routing-instances: 
          - { get_input: hq_router_name }

  hq_firewall_rule:
    type: cloudify.versa.nodes.NGFirewallRule
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: org_name }
      policy_name: { get_input: firewall_policy_name }
      on_top: true
      rule:
        name: { get_input: firewall_rule_name }
        match:
          source:
            zone:
              zone-list:
                - trust
        set:
          lef:
            event: end
            options:
              send-pcap-data:
                  enable: False
          action: allow
          security-profile:
            urlf: { get_input: firewall_filter_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: hq_url_filter

outputs:
  configuration:
    value:
      FW: enable
      blocked_filter: { get_input: filter_string }

