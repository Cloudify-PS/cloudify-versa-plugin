tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint configure Versa Director for basic use case
  One HQ with two branches.


imports:
  - http://www.getcloudify.org/spec/cloudify/3.4.1/types.yaml
  - https://raw.githubusercontent.com/Cloudify-PS/cloudify-versa-plugin/master/plugin.yaml


inputs:
#
# Versa configuration
#
  versa_url:
    default: ""

  client_id:
    default: ""

  client_secret:
    default: ""

  username:
    default: ""

  password:
    default: ""

#
# CMS configuration
#
  pool_name:
    default: ""

  pool_ip_address:
    default: ""

  cms_org_name:  
    default: ""

#    
# Networks configuration
#
  ext_network_name:
    default: ""

  ext_network_subnet:
    default: ""

  ext_network_mask:  
    default: ""

  hq_network_name:
    default: ""

  hq_network_subnet:
    default: ""

  hq_network_mask:  
    default: ""

  branch1_network_name:
    default: ""

  branch1_network_subnet:
    default: ""

  branch1_network_mask:  
    default: ""

  branch2_network_name:
    default: ""

  branch2_network_subnet:
    default: ""

  branch2_network_mask:  
    default: ""

#
# Organization configuration
#
  parent_org_name:
    default: ""

  hq_org_name:
    default: ""

  branch1_org_name:
    default: ""

  branch2_org_name:
    default: ""

#    
# Appliance configuration
#
  appliance_name:
    default: ""

  ext_address:  
    default: ""

  hq_address:  
    default: ""

  branch1_address:  
    default: ""

  branch2_address:  
    default: ""

  ext_interface:
    default: ""

  hq_interface:
    default: ""

  branch1_interface:
    default: ""

  branch2_interface:
    default: ""

  unit:
    default: ""  


#    
# Node templates
#
node_templates:
  versa_configuration:
    type: cloudify.versa.nodes.versa_configuration
    properties:
      versa_config:
        username: { get_input: username }
        password: { get_input: password }
        versa_url: { get_input: versa_url}
        client_id: { get_input: client_id}
        client_secret: { get_input: client_secret}


  resource_pool:
    type: cloudify.versa.nodes.ResourcePool
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: pool_name }
      ip_address: { get_input: pool_ip_address }

  cms_organization:  
    type: cloudify.versa.nodes.CMSLocalOrganization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: cms_org_name }
      networks:
        - name: { get_input: ext_network_name }
          subnet: { get_input: ext_network_subnet }
          mask: { get_input: ext_network_mask }
        - name: { get_input: hg_network_name }
          subnet: { get_input: hg_network_subnet }
          mask: { get_input: hg_network_mask }
        - name: { get_input: branch1_network_name }
          subnet: { get_input: branch1_network_subnet }
          mask: { get_input: branch1_network_mask }
        - name: { get_input: branch2_network_name }
          subnet: { get_input: branch2_network_subnet }
          mask: { get_input: branch2_network_mask }
      resources:
        - { get_property: [resource_pool, name] }
    relationships:
      - type: cloudify.versa.cms_org_connected_to_pool
        target: resource_pool

  parent_organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: parent_org_name
      parent: ""
      cms_org_name: { get_input: cms_org_name }
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization

  hq_organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: hq_org_name }
      parent: { get_input: parent_org_name }
      cms_org_name: { get_input: cms_org_name }
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization
      - type: cloudify.versa.parent
        target: parent_organization

  branch1_organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: branch1_org_name }
      parent: { get_input: parent_org_name }
      cms_org_name: { get_input: cms_org_name }
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization
      - type: cloudify.versa.parent
        target: parent_organization

  branch2_organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: branch2_org_name }
      parent: { get_input: parent_org_name }
      cms_org_name: { get_input: cms_org_name }
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization
      - type: cloudify.versa.parent
        target: parent_organization

  appliance:
    type: cloudify.versa.nodes.Appliance
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      management_ip: { get_input: pool_ip_address }
      appliance_owner:
        nms_org_name: { get_input: parent_org_name }
        cms_org_name: { get_input: cms_org_name }
        networks:
          - name: { get_input: ext_network_name }
            ip_address: { get_input: ext_address }
            interface: { get_input: ext_interface }
    relationships:
      - type: cloudify.versa.organization_connected_to_appliance
        target: parent_organization
      - type: cloudify.versa.organization_connected_to_appliance
        target: hq_organization
      - type: cloudify.versa.organization_connected_to_appliance
        target: branch1_organization
      - type: cloudify.versa.organization_connected_to_appliance
        target: branch2_organization

  hq_associated:
    type: cloudify.versa.nodes.Associated_organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      organization:
        nms_org_name: { get_input: hq_org_name }
        parent: { get_input: parent_org_name }
        networks:
          - name: { get_input: hq_network_name }
            parent_interface: { get_input: hq_interface }
            ip_address: { get_input: hq_address }
            mask: { get_input: hq_network_mask }
            unit: { get_input: unit }
    relationships:
      - type: cloudify.versa.associated
        target: appliance

  branch1_associated:
    type: cloudify.versa.nodes.Associated_organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      organization:
        nms_org_name: { get_input: branch1_org_name }
        parent: { get_input: parent_org_name }
        networks:
          - name: { get_input: branch1_network_name }
            parent_interface: { get_input: branch1_interface }
            ip_address: { get_input: branch1_address }
            mask: { get_input: branch1_network_mask }
            unit: { get_input: unit }
    relationships:
      - type: cloudify.versa.associated
        target: appliance

  branch2_associated:
    type: cloudify.versa.nodes.Associated_organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      organization:
        nms_org_name: { get_input: branch2_org_name }
        parent: { get_input: parent_org_name }
        networks:
          - name: { get_input: branch2_network_name }
            parent_interface: { get_input: branch2_interface }
            ip_address: { get_input: branch2_address }
            mask: { get_input: branch2_network_mask }
            unit: { get_input: unit }
    relationships:
      - type: cloudify.versa.associated
        target: appliance


