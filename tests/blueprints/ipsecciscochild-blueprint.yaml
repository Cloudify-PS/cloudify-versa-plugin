tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - https://raw.githubusercontent.com/Cloudify-PS/cloudify-versa-plugin/master/plugin.yaml

inputs:
    versa_url:
        default: "https://172.19.0.210:9183"
    client_id:
        default: "voae_rest"
    client_secret:
        default: "asrevnet_123"
    username:
        default: "Administrator"
    password:
        default: "versa123"
    appliance_name:
      default: ipsec
    org_name:
        default: LEGO
    hq_name:
        default: LEGO_HQ
    use_exsisting_appliance:
        default: true
    pool_name: 
        default: vcpe1_tdcpool
    pool_ip: 
        default: 192.168.200.205
    cms_org_name: 
        default: vcpe1_tdccms
    external_network_name:
        default: vlan100
    external_interface_name:
      default: vni-0/0 
    hq_network_name:
        default: vcpe1_hq_network
    hq_interface_name: 
      default: vni-0/1
    tunnel_interface_name: 
      default: tvi-0/0
    hq_router_name: 
        default:  hq_router
    external_router_name: 
        default: external_router
    unit:
        default: 0
    dhcp_profile_name:
        default: dhcp_profile
    dhcp_lease_profile_name:
        default: dhcp_lease_profile
    dhcp_options_profile_name:
        default: dhcp_options_profile
    branch_domain_name:
        default: branch.org
    dns_server: 
        default: 8.8.8.8
    dhcp_pool_mask: 
        default: 255.255.255.0
    branch1_dhcp_begin_address: 
        default: 10.11.0.100
    branch1_dhcp_end_address: 
        default: 10.11.0.200
    created_by_appliance:
        default: true
    hq_range_low: 
        default: 87.53.87.1
    hq_range_high: 
        default: 87.53.87.4
    hq_nat_rule_source_address: 
        default: 10.11.0.0/24
    firewall_policy_name:
      default: firewall_policy
    firewall_rule_name:
      default: firewall_rule

node_templates:


  my_host:
    type: cloudify.nodes.Compute
    properties:
      agent_config:
        install_method: none
  
  CPE:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: "cisco.py"
          executor: central_deployment_agent
          inputs:
            host: 87.53.86.18
            user: tdc
            password: tdc
            enable_password: tdc
            telnet: true
            remove_global: ^ip dhcp excluded-address;^ip dhcp pool INTERNET;^ip nat inside;^access-list
            remove_children_from_parent: ^interface Vlan30;ip address
            dry_run: false
            extra_cmds: >
              ip dhcp excluded-address 192.168.65.200 192.168.65.254
              
              
              ip dhcp pool INTERNET1
               vrf INTERNET
               network 192.168.65.0 255.255.255.0
               default-router 87.53.86.13 
               dns-server 194.239.134.83 193.162.153.164 
               lease 0 1
               class INTERNET1
                address range 192.168.65.2 192.168.65.200
                
              crypto ikev2 proposal versa 
               encryption aes-cbc-128
               integrity sha1
               group 2
              crypto ikev2 policy versa 
               match fvrf INTERNET
               proposal versa
              crypto ikev2 keyring versa1
               peer branch3
                address 87.53.86.10
                pre-shared-key local versa123
                pre-shared-key remote versa123
               !
              crypto ikev2 profile versa
               match fvrf INTERNET
               match identity remote address 87.53.86.10 255.255.255.255 
               identity local address 87.53.86.14
               authentication remote pre-share
               authentication local pre-share
               keyring local versa1
               dpd 30 5 on-demand
               ivrf INTERNET
              crypto ipsec transform-set versa esp-aes esp-sha-hmac 
               mode tunnel
              crypto ipsec profile versa
               set transform-set versa 
               set ikev2-profile versa
              interface Vlan30
               ip address 192.168.65.1 255.255.255.0               
              interface Tunnel4
               ip vrf forwarding INTERNET
               ip address 11.11.11.1 255.255.255.0
               ip mtu 1400
               ip nat outside
               ip virtual-reassembly in
               tunnel source GigabitEthernet8.2000
               tunnel mode ipsec ipv4
               tunnel destination 87.53.86.10
               tunnel vrf INTERNET
               tunnel protection ipsec profile versa
              interface GigabitEthernet8.2000
               ip vrf forwarding INTERNET
               ip address 87.53.86.14 255.255.255.252
               ip nat outside
               exit
               
              ip route vrf INTERNET 10.11.0.0 255.255.255.0 Tunnel4
              
              ip nat inside source list 2 interface GigabitEthernet8.2000 vrf INTERNET overload
              
              access-list 2 permit 192.168.65.0 0.0.0.255
    relationships:
      - type: cloudify.relationships.contained_in
        target: my_host

  #####################
  # Versa config
  #####################
  versa_configuration:
    type: cloudify.versa.nodes.versa_configuration
    properties:
      versa_config:
        username: { get_input: username }
        password: { get_input: password }
        versa_url: { get_input: versa_url}
        client_id: { get_input: client_id}
        client_secret: { get_input: client_secret}

  #####################
  # CMS config
  #####################
  resource_pool:
    type: cloudify.versa.nodes.ResourcePool
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      use_existing: { get_input : use_exsisting_appliance }
    relationships:
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            instance:
              name: { get_input: pool_name }
              ip-address: { get_input: pool_ip }

  cms_organization:
    type: cloudify.versa.nodes.CMSLocalOrganization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      use_existing: { get_input : use_exsisting_appliance }
      organization:
        name: { get_input: cms_org_name }
        resource-pool:
          instances: 
            - { get_input: pool_name }
        org-networks:
          org-network:
            - name: { get_input: external_network_name }
              ipaddress-allocation-mode: manual
    relationships:
      - type: cloudify.versa.cms_org_connected_to_pool
        target: resource_pool

  #####################
  # NMS organizations
  #####################
  organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      use_existing: { get_input : use_exsisting_appliance }
      organization:
        name: { get_input: org_name }
        parent-org: none
        subscription-plan: Default-All-Services-Plan
        cms-orgs: 
            name: { get_input: cms_org_name }
            cms-connector: local
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization

  #####################
  # Appliance configuration
  #####################
  appliance:
    type: cloudify.versa.nodes.Appliance
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      #use_existing: { get_input : use_exsisting_appliance }
      device:
        name: { get_input: appliance_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            device:
              mgmt-ip: { get_input: pool_ip }
              name: { get_input: appliance_name }
              org: { get_input: org_name }
              cmsorg: { get_input: cms_org_name }
              type: service-vnf
              networking-info:
                  - network-info:
                      network-name: { get_input: external_network_name }
                      interface: { get_input: external_interface_name }
                      ip-address: 87.53.86.10
              snglist:
                  - sng:
                      name: Default_All_Services
                      isPartOfVCSN: true
                      services:
                          - cgnat
                          - nextgen-firewall
                          - ipsec
                          - sdwan
              subscription:
                  solution-tier: nextgen-firewall
                  bandwidth: 100
                  is-analytics-enabled: true
    relationships:
      - type: cloudify.versa.organization_connected_to_appliance
        target: organization
      - type: cloudify.relationships.depends_on
        target: my_host
          
  hq_associated:
    type: cloudify.versa.nodes.AssociatedOrganization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            organization:
              appliance: { get_input: appliance_name }
              org: { get_input: hq_name}
              subscription:
                solution-tier: nextgen-firewall
                bandwidth: 100
              services:
                - cgnat
                - nextgen-firewall
                - ipsec
                - sdwan
              networking-info:
                - network-info:
                    network-name: { get_input: hq_network_name }
                    ip-address: 10.11.0.2
                    mask: 255.255.255.0
                    parent-interface: { get_input: hq_interface_name }
                    subinterface-unit-number: { get_input: unit }
                    ipaddress-allocation-mode: MANUAL
    relationships:
      - type: cloudify.versa.associated
        target: appliance
          
  #####################
  # Interface configuration
  #####################
  tunnel_interface:
    type: cloudify.versa.nodes.Interface
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      interface:
        name: { get_input: tunnel_interface_name }
        enable: true
        mode: ipsec
        type: ipsec
        mtu: 1400
        unit:
          - name: 0
            enable: true
            family:
                inet:
                  address:
                    addr: 11.11.11.63/24
    relationships:
      - type: cloudify.relationships.depends_on
        target: appliance


  #####################
  # Routing configuration
  #####################
  hq_router:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      router:
        name: { get_input: hq_router_name }
        instance-type: virtual-router
        networks:
          - { get_input: hq_network_name }
        interfaces:
          - { concat: [get_input: tunnel_interface_name, ".", get_input: unit] }
        routing-options:
          static:
            route:
              rti-static-route-list:
                - ip-prefix: 192.168.65.0/24
                  next-hop: 11.11.11.1
                  preference: 1
                  tag: 0
                  interface: none
    relationships:
      - type: cloudify.relationships.depends_on
        target: hq_associated
      - type: cloudify.relationships.depends_on
        target: tunnel_interface

  external_router:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      router:
        name: { get_input: external_router_name }
        instance-type: virtual-router
        networks:
          - { get_input: external_network_name }
        routing-options:
          static:
            route:
              rti-static-route-list:
                - ip-prefix: 0.0.0.0/0
                  next-hop: 87.53.86.9
                  preference: 1
                  tag: 0
                  interface: none
    relationships:
      - type: cloudify.relationships.depends_on
        target: appliance

  #####################
  # Limits configuration
  #####################
  dhcp_profile:
    type: cloudify.versa.nodes.DHCPProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      profile_name: { get_input: dhcp_profile_name }
      organizations:
        - { get_input: hq_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: appliance


  limits:
    type: cloudify.versa.nodes.Limits
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      dhcp_profile: { get_input: dhcp_profile_name }
      routes:
        - { get_input: hq_router_name}
        - { get_input: external_router_name}
      interfaces:
          - { concat: [get_input: tunnel_interface_name, ".", get_input: unit] }
      provider_orgs:
          - { get_input: org_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: hq_router
      - type: cloudify.relationships.depends_on
        target: external_router
      - type: cloudify.relationships.depends_on
        target: dhcp_profile
      - type: cloudify.relationships.depends_on
        target: tunnel_interface

  #####################
  # VPN configuration
  #####################

  vpn_profile:
    type: cloudify.versa.nodes.VPNProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      profile:
        name: vpn_profile
        vpn-type: site-to-site
        tunnel-initiate: automatic
        hardware-accelerator: any
        routing-instance: { get_input: external_router_name}
        tunnel-routing-instance: { get_input: hq_router_name}
        tunnel-interface: { concat: [get_input: tunnel_interface_name, ".", get_input: unit] }
        local-auth-info:
            auth-type: psk
            id-string: 87.53.86.10
            id-type: ip
            key: versa123
        peer-auth-info:
            auth-type: psk
            id-type: ip
            key: versa123
            id-string: 87.53.86.14
        ipsec:
            fragmentation: pre-fragmentation
            force-nat-t: disable
            mode: tunnel
            pfs-group: mod-none
            anti-replay: disable
            transform: esp-aes128-sha1
            keepalive-timeout: 10
        ike:
            version: v2
            group: mod2
            transform: aes128-sha1
            lifetime: 28800
            dpd-timeout: 30
        local:
            inet: 87.53.86.10
        peer:
            inet: 87.53.86.14
    relationships:
      - type: cloudify.relationships.depends_on
        target: limits

  #####################
  # DHCP configuration
  #####################
  dhcp_lease_profile:
    type: cloudify.versa.nodes.DHCPLeaseProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: limits

  dhcp_options_profile:
    type: cloudify.versa.nodes.DHCPOptionsProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      name: { get_input: dhcp_options_profile_name }
      domain: { get_input: branch_domain_name }
      servers:
        - { get_input: dns_server }
    relationships:
      - type: cloudify.relationships.depends_on
        target: limits

  dhcp_global_configuration:
    type: cloudify.versa.nodes.DHCPGlobalConfiguration
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      dhcp_profile: { get_input: dhcp_profile_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile: { get_input: dhcp_options_profile_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: dhcp_lease_profile
      - type: cloudify.relationships.depends_on
        target: dhcp_options_profile

  dhcp_pool:
    type: cloudify.versa.nodes.DHCPPool
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile: { get_input: dhcp_options_profile_name }
      name: branch_pool
      mask: { get_input: dhcp_pool_mask }
      range_name: branch_range 
      begin_address: { get_input: branch1_dhcp_begin_address }
      end_address: { get_input: branch1_dhcp_end_address }
    relationships:
      - type: cloudify.relationships.depends_on
        target: dhcp_global_configuration
      - type: cloudify.relationships.depends_on
        target: limits
      - type: cloudify.relationships.depends_on
        target: dhcp_lease_profile
      - type: cloudify.relationships.depends_on
        target: dhcp_options_profile

  dhcp_server:
    type: cloudify.versa.nodes.DHCPServer
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile: { get_input: dhcp_options_profile_name }
      pool_name: branch_pool
      name: branch_dhcp_server
      networks:
        - {get_input: hq_network_name }
    relationships:
      - type: cloudify.versa.dhcp_connected_to_profile
        target: dhcp_pool
  
  #####################
  # NAT configuration
  #####################
  hq_nat:
    type: cloudify.versa.nodes.CGNat
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      pool:
        name: hq_nat_pool
        ranges:
          - name: hq_pool_range
            low: { get_input: hq_range_low }
            hight: { get_input: hq_range_high }
        routing_instance: { get_input: external_router_name }
        provider_org: { get_input: org_name }

      rule:
        name: hq_nat_rule
        addresses:
          - { get_input: hq_nat_rule_source_address }
    relationships:
      - type: cloudify.versa.cgnat_connected_to_routing
        target: hq_router
      - type: cloudify.relationships.depends_on
        target: limits

  #####################
  # Zone configuration
  #####################
  trust_zone:
    type: cloudify.versa.nodes.ZoneUpdate
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      zone:
        name: trust
        networks: 
            - { get_input: hq_network_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: hq_associated
      - type: cloudify.relationships.depends_on
        target: limits

  untrust_zone:
    type: cloudify.versa.nodes.ZoneUpdate
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      zone:
        name: untrust
        routing-instance:
          - { get_input: external_router_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: external_router
      - type: cloudify.relationships.depends_on
        target: limits

  #####################
  # Firewall configuration
  #####################
  hq_firewall_policy:
    type: cloudify.versa.nodes.NGFirewallPolicy
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      policy:
        name: { get_input: firewall_policy_name }
    relationships:
      - type: cloudify.relationships.depends_on
        target: hq_associated

  hq_firewall_rule:
    type: cloudify.versa.nodes.NGFirewallRule
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_name }
      policy_name: { get_input: firewall_policy_name }
      rules:
        - name: { get_input: firewall_rule_name }
          match:
            source:
              zone:
                zone-list:
                  - trust
            destination:
              zone:
                zone-list:
                  - untrust
          set:
            lef:
              event: end
              options:
                send-pcap-data:
                    enable: False
            action: allow
    relationships:
      - type: cloudify.relationships.depends_on
        target: trust_zone
      - type: cloudify.relationships.depends_on
        target: untrust_zone
      - type: cloudify.relationships.depends_on
        target: hq_firewall_policy

outputs:
  configuration:
    value:
      HQ_network: { get_input: hq_nat_rule_source_address }
      branch2_network: 192.168.65.1/24
      DHCP_address_pool: { concat: [get_input: branch1_dhcp_begin_address, "-", get_input: branch1_dhcp_end_address] }
      FW: enable

