tosca_definitions_version: cloudify_dsl_1_3

#
# Node templates
#
node_templates:
  #####################
  # Versa config
  #####################
  versa_configuration:
    type: cloudify.versa.nodes.versa_configuration
    properties:
      versa_config:
        username: { get_input: username }
        password: { get_input: password }
        versa_url: { get_input: versa_url}
        client_id: { get_input: client_id}
        client_secret: { get_input: client_secret}


  hq_associated:
    type: cloudify.versa.nodes.Associated_organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      organization:
        nms_org_name: { get_property: [hq_organization, name]}
        parent: { get_input: parent_org_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            organization:
              networks:
                - name: { get_property: [hq_network, resource_id] }
                  parent_interface: { get_input: hq_interface }
                  ip_address: { get_attribute: [flexvm, networks, get_property:[hq_network, resource_id] ] }
                  mask: { get_input: hq_network_mask }
                  unit: { get_input: unit }
    relationships:
      - type: cloudify.versa.associated
        target: appliance

  branch_network:
    type: cloudify.versa.nodes.Network
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_property: [hq_organization, name]}
      name: { get_input: network_name }
    relationships:
      - type: cloudify.versa.network_connected_to_org
        target: hq_associated

  #####################
  # Routing configuration
  #####################
  branch_routing:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_property: [hq_organization, name]}
      name: { concat: [get_input: hq_name, "_router"] }
      parent_router_name: { get_input: parent_routing_name }
      networks:
        - { get_property: [hq_network, resource_id] }
    relationships:
      - type: cloudify.versa.router_connected_to_org
        target: hq_associated
      - type: cloudify.versa.router_connected_to_router
        target: parent_routing

  #####################
  # DHCP configuration
  #####################
  branch_dhcp:
    type: cloudify.versa.nodes.DHCP
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_property: [hq_organization, name]}
      profile_name: { get_input: dhcp_profile_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile:
        name: { get_input: dhcp_options_profile_name }
        domain: { get_input: hq_domain_name}
        servers:
          - { get_input: dns_server}
      pool:
        name: { concat: [get_input: hq_name, "_pool"] }
        mask: { get_input: hq_dhcp_pool_mask }
        range_name: { concat: [get_input: hq_name, "_range"] }
        begin_address: { get_input: hq_dhcp_begin_address }
        end_address: { get_input: hq_dhcp_end_address }
      server:
        name: { concat: [get_input: hq_name, "_dhcp_server"] }
        networks:
          - { get_property: [hq_network, resource_id] }
    relationships:
      - type: cloudify.versa.dhcp_connected_to_profile
        target: dhcp_profile
      - type: cloudify.versa.dhcp_connected_to_organization
        target: hq_associated
      - type: cloudify.versa.dhcp_connected_to_routing
        target: hq_routing


  #####################
  # Firewall configuration
  #####################

  branch_firewall:
    type: cloudify.versa.nodes.NGFirewall
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_property: [branch_organization, name]}
      policy_name: { get_input: firewall_policy_name }
      rules:
        - name: { get_input: firewall_rule_name }
      url_filtering:
        - name: test
          description: test
          default-action:
             predefined: allow
          cloud-lookup-mode: never
          category-action-map:
             category-action: []
          reputation-action-map:
             reputation-action: []
          blacklist:
             action:
               predefined: alert
             patterns:
               - "https://www.youtube.com/*"
          whitelist: {}
      zones:
        - trust:
            networks:
              - { get_property: [hq_network, resource_id]}
        - untrust:
            routing_instances:
              - { get_input: parent_routing_name }
    relationships:
      - type: cloudify.versa.firewall_connected_to_org
        target: hq_routing
      - type: cloudify.versa.firewall_connected_to_router
        target: parent_routing

  #####################
  # NAT configuration
  #####################
  branch_nat:
    type: cloudify.versa.nodes.CGNat
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_property: [hq_organization, name]}
      pool:
        name: { concat:[get_input: hq_name, "_nat_pool"] }
        ranges:
          - name: { concat:[get_input: hq_name, "_nat_range"] }
            low: { get_input: hq_range_low }
            hight: { get_input: hq_range_high }
        routing_instance: { get_input: parent_routing_name }
        provider_org: { get_input: parent_org_name }
      rule:
        name: { get_input: nat_rule_name }
        addresses:
          - { get_input: hq_nat_rule_source_address }
    relationships:
      - type: cloudify.versa.cgnat_connected_to_org
        target: hq_associated
      - type: cloudify.versa.cgnat_connected_to_routing
        target: hq_routing

