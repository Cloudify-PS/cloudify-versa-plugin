tosca_definitions_version: cloudify_dsl_1_3

inputs:
#
# Versa configuration
#
  versa_url:
    default: ""

  client_id:
    default: ""

  client_secret:
    default: ""

  username:
    default: ""

  password:
    default: ""

#
# CMS configuration
#
  pool_name:
    default: ""

  cms_org_name:
    default: ""

#
# Networks configuration
#
  parent_network_name:
    default: ""

  ext_network_subnet:
    default: ""

  ext_network_mask:
    default: ""

  hq_network_name:
    default: ""

  hq_network_subnet:
    default: ""

  hq_network_mask:
    default: ""

  branch1_network_name:
    default: ""

  branch1_network_subnet:
    default: ""

  branch1_network_mask:
    default: ""

  branch2_network_name:
    default: ""

  branch2_network_subnet:
    default: ""

  branch2_network_mask:
    default: ""

#
# Organization configuration
#
  parent_org_name:
    default: ""

  hq_org_name:
    default: ""

  branch1_org_name:
    default: ""

  branch2_org_name:
    default: ""
#
# Appliance configuration
#
  appliance_name:
    default: ""

  ext_interface:
    default: ""

  hq_interface:
    default: ""

  branch1_interface:
    default: ""

  branch2_interface:
    default: ""

  unit:
    default: 0
#
# Routing Configuration
#
  default_address:
    default: "0.0.0.0/0"

  gateway_address:
    default: ""

  routing_preference:
    default: 1

  routing_tag:
    default: 0

  gateway_interface:
    default: ""

  parent_routing_name:
    default: ""

  hq_routing_name:
    default: ""

  branch1_routing_name:
    default: ""

  branch2_routing_name:
    default: ""
#
# DHCP Configuration
#
  dhcp_profile_name :
    default: ""

  dhcp_options_profile_name:
    default: ""

  dhcp_lease_profile_name:
    default: ""

  dhcp_pool_name: 
    default: ""

  dhcp_range_name:
    default: ""

  dhcp_server_name:
    default: ""

  dns_server:
    default: ""

  hq_domain_name:
    default: ""

  branch1_domain_name:
    default: ""

  branch2_domain_name:
    default: ""
        
  hq_dhcp_pool_mask:
    default: ""
        
  hq_dhcp_begin_address:
    default: ""
        
  hq_dhcp_end_address:
    default: ""

  branch1_dhcp_pool_mask:
    default: ""
        
  branch1_dhcp_begin_address:
    default: ""
        
  branch1_dhcp_end_address:
    default: ""
        
  branch2_dhcp_pool_mask:
    default: ""
        
  branch2_dhcp_begin_address:
    default: ""
        
  branch2_dhcp_end_address:
    default: ""
#
# Firewall configuration
#
  firewall_policy_name:
    default: ""

  firewall_rule_name:
    default: ""
#
# NAT configuration
#
  nat_pool_name:
    default: ""

  nat_range_name:
    default: ""

  nat_rule_name:
    default: ""

  hq_range_low:
    default: ""

  hq_range_hight:
    default: ""

  hq_nat_rule_source_address:
    default: ""

  branch1_range_low:
    default: ""

  branch1_range_hight:
    default: ""

  branch1_nat_rule_source_address:
    default: ""

  branch2_range_low:
    default: ""

  branch2_range_hight:
    default: ""

  branch2_nat_rule_source_address:
    default: ""
#
# Node templates
#
node_templates:
  #####################
  # Versa config
  #####################
  versa_configuration:
    type: cloudify.versa.nodes.versa_configuration
    properties:
      versa_config:
        username: { get_input: username }
        password: { get_input: password }
        versa_url: { get_input: versa_url}
        client_id: { get_input: client_id}
        client_secret: { get_input: client_secret}


  #####################
  # CMS config
  #####################
  resource_pool:
    type: cloudify.versa.nodes.ResourcePool
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: pool_name }
    relationships:
      - type: cloudify.versa.pool_connected_to_vm
        target: flexvm
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            ip_address: { get_attribute: [flexvm, ip] }

  cms_organization:
    type: cloudify.versa.nodes.CMSLocalOrganization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: cms_org_name }
      networks:
        - name: { get_input: parent_network_name }
          subnet: { get_input: ext_network_subnet }
          mask: { get_input: ext_network_mask }
        - name: { get_input: hq_network_name }
          subnet: { get_input: hq_network_subnet }
          mask: { get_input: hq_network_mask }
        - name: { get_input: branch1_network_name }
          subnet: { get_input: branch1_network_subnet }
          mask: { get_input: branch1_network_mask }
        - name: { get_input: branch2_network_name }
          subnet: { get_input: branch2_network_subnet }
          mask: { get_input: branch2_network_mask }
      resources:
        - { get_property: [resource_pool, name] }
    relationships:
      - type: cloudify.versa.cms_org_connected_to_pool
        target: resource_pool

  #####################
  # NMS organizations
  #####################
  parent_organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: parent_org_name }
      parent: ""
      cms_org_name: { get_input: cms_org_name }
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization

  hq_organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: hq_org_name }
      parent: { get_input: parent_org_name }
      cms_org_name: { get_input: cms_org_name }
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization
      - type: cloudify.versa.parent
        target: parent_organization

  branch1_organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: branch1_org_name }
      parent: { get_input: parent_org_name }
      cms_org_name: { get_input: cms_org_name }
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization
      - type: cloudify.versa.parent
        target: parent_organization

  branch2_organization:
    type: cloudify.versa.nodes.Organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      name: { get_input: branch2_org_name }
      parent: { get_input: parent_org_name }
      cms_org_name: { get_input: cms_org_name }
    relationships:
      - type: cloudify.versa.nms_org_connected_to_cms_org
        target: cms_organization
      - type: cloudify.versa.parent
        target: parent_organization
  
  #####################
  # Appliance configuration
  #####################
  appliance:
    type: cloudify.versa.nodes.Appliance
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      appliance_owner:
        nms_org_name: { get_input: parent_org_name }
        cms_org_name: { get_input: cms_org_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            management_ip: { get_attribute: [flexvm, ip] }
            appliance_owner:
              networks:
                - name: { get_input: parent_network_name }
                  ip_address: { get_attribute: [flexvm, networks, VersaManagement] }
                  interface: { get_input: ext_interface }
                
    relationships:
      - type: cloudify.versa.organization_connected_to_appliance
        target: parent_organization
      - type: cloudify.versa.organization_connected_to_appliance
        target: hq_organization
      - type: cloudify.versa.organization_connected_to_appliance
        target: branch1_organization
      - type: cloudify.versa.organization_connected_to_appliance
        target: branch2_organization

  hq_associated:
    type: cloudify.versa.nodes.Associated_organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      organization:
        nms_org_name: { get_input: hq_org_name }
        parent: { get_input: parent_org_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            organization:
              networks:
                - name: { get_input: hq_network_name }
                  parent_interface: { get_input: hq_interface }
                  ip_address: { get_attribute: [flexvm, networks, hq_network] }
                  mask: { get_input: hq_network_mask }
                  unit: { get_input: unit }
    relationships:
      - type: cloudify.versa.associated
        target: appliance

  branch1_associated:
    type: cloudify.versa.nodes.Associated_organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      organization:
        nms_org_name: { get_input: branch1_org_name }
        parent: { get_input: parent_org_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            organization:
              networks:
                - name: { get_input: branch1_network_name }
                  parent_interface: { get_input: branch1_interface }
                  ip_address: { get_attribute: [flexvm, networks, branch1_network] }
                  mask: { get_input: branch1_network_mask }
                  unit: { get_input: unit }
    relationships:
      - type: cloudify.versa.associated
        target: hq_associated

  branch2_associated:
    type: cloudify.versa.nodes.Associated_organization
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      organization:
        nms_org_name: { get_input: branch2_org_name }
        parent: { get_input: parent_org_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            organization:
              networks:
                - name: { get_input: branch2_network_name }
                  parent_interface: { get_input: branch2_interface }
                  ip_address: { get_attribute: [flexvm, networks, branch2_network] }
                  mask: { get_input: branch2_network_mask }
                  unit: { get_input: unit }
    relationships:
      - type: cloudify.versa.associated
        target: branch1_associated

  #####################
  # Routing configuration
  #####################
  parent_routing:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: parent_org_name }
      name: { get_input: parent_routing_name }
      networks:
        - { get_input: parent_network_name }
      routings:
        - ip_prefix: { get_input: default_address }
          next_hop: { get_input: gateway_address }
          interface: { get_input: gateway_interface }
          preference: { get_input: routing_preference }
          tag: { get_input: routing_tag }
    relationships:
      - type: cloudify.versa.router_connected_to_org
        target: appliance

  hq_routing:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_org_name }
      name: { get_input: hq_routing_name }
      parent_router_name: { get_input: parent_routing_name }
      networks:
        - { get_input: hq_network_name }
    relationships:
      - type: cloudify.versa.router_connected_to_org
        target: hq_associated
      - type: cloudify.versa.router_connected_to_router
        target: parent_routing

  branch1_routing:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: branch1_org_name }
      name: { get_input: branch1_routing_name }
      parent_router_name: { get_input: parent_routing_name }
      networks:
        - { get_input: branch1_network_name }
    relationships:
      - type: cloudify.versa.router_connected_to_org
        target: branch1_associated
      - type: cloudify.versa.router_connected_to_router
        target: parent_routing

  branch2_routing:
    type: cloudify.versa.nodes.Router
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: branch2_org_name }
      name: { get_input: branch2_routing_name }
      parent_router_name: { get_input: parent_routing_name }
      networks:
        - { get_input: branch2_network_name }
    relationships:
      - type: cloudify.versa.router_connected_to_org
        target: branch2_associated
      - type: cloudify.versa.router_connected_to_router
        target: parent_routing

  #####################
  # DHCP configuration
  #####################
  dhcp_profile:
    type: cloudify.versa.nodes.DHCPProfile
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      profile_name: { get_input: dhcp_profile_name }
    relationships:
      - type: cloudify.versa.dhcp_profile_connected_to_appliance
        target: appliance

  hq_dhcp:
    type: cloudify.versa.nodes.DHCP
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_org_name }
      profile_name: { get_input: dhcp_profile_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile:
        name: { get_input: dhcp_options_profile_name }
        domain: { get_input: hq_domain_name}
        servers:
          - { get_input: dns_server}
      pool:
        name: { get_input: dhcp_pool_name }
        mask: { get_input: hq_dhcp_pool_mask }
        range_name: { get_input: dhcp_range_name }
        begin_address: { get_input: hq_dhcp_begin_address }
        end_address: { get_input: hq_dhcp_end_address }
      server:
        name: { get_input: dhcp_server_name }
        networks:
          - { get_input: hq_network_name }
    relationships:
      - type: cloudify.versa.dhcp_connected_to_profile
        target: dhcp_profile
      - type: cloudify.versa.dhcp_connected_to_organization
        target: hq_associated
      - type: cloudify.versa.dhcp_connected_to_routing
        target: hq_routing

  branch1_dhcp:
    type: cloudify.versa.nodes.DHCP
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: branch1_org_name }
      profile_name: { get_input: dhcp_profile_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile:
        name: { get_input: dhcp_options_profile_name }
        domain: { get_input: branch1_domain_name}
        servers:
          - { get_input: dns_server}
      pool:
          name: { get_input: dhcp_pool_name }
          mask: { get_input: branch1_dhcp_pool_mask }
          range_name: { get_input: dhcp_range_name }
          begin_address: { get_input: branch1_dhcp_begin_address }
          end_address: { get_input: branch1_dhcp_end_address }
      server:
        name: { get_input: dhcp_server_name }
        networks:
          - { get_input: branch1_network_name }
    relationships:
      - type: cloudify.versa.dhcp_connected_to_profile
        target: dhcp_profile
      - type: cloudify.versa.dhcp_connected_to_organization
        target: branch1_associated
      - type: cloudify.versa.dhcp_connected_to_routing
        target: branch1_routing

  branch2_dhcp:
    type: cloudify.versa.nodes.DHCP
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: branch2_org_name }
      profile_name: { get_input: dhcp_profile_name }
      lease_profile: { get_input: dhcp_lease_profile_name }
      options_profile:
        name: { get_input: dhcp_options_profile_name }
        domain: { get_input: branch2_domain_name}
        servers:
          - { get_input: dns_server}
      pool:
          name: { get_input: dhcp_pool_name }
          mask: { get_input: branch2_dhcp_pool_mask }
          range_name: { get_input: dhcp_range_name }
          begin_address: { get_input: branch2_dhcp_begin_address }
          end_address: { get_input: branch2_dhcp_end_address }
      server:
        name: { get_input: dhcp_server_name }
        networks:
          - { get_input: branch2_network_name }
    relationships:
      - type: cloudify.versa.dhcp_connected_to_profile
        target: dhcp_profile
      - type: cloudify.versa.dhcp_connected_to_organization
        target: branch2_associated
      - type: cloudify.versa.dhcp_connected_to_routing
        target: branch2_routing

  #####################
  # Firewall configuration
  #####################

  hq_firewall:
    type: cloudify.versa.nodes.Firewall
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_org_name }
      policy_name: { get_input: firewall_policy_name }
      rule_name: { get_input: firewall_rule_name }
      zones:
        - trust:
            networks:
              - { get_input: hq_network_name }
        - untrust:
            routing_instances:
              - { get_input: parent_routing_name }
    relationships:
      - type: cloudify.versa.firewall_connected_to_org
        target: hq_routing
      - type: cloudify.versa.firewall_connected_to_router
        target: parent_routing

  branch1_firewall:
    type: cloudify.versa.nodes.Firewall
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: branch1_org_name }
      policy_name: { get_input: firewall_policy_name }
      rule_name: { get_input: firewall_rule_name }
      zones:
        - trust:
            networks:
              - { get_input: branch1_network_name }
        - untrust:
            routing_instances:
              - { get_input: parent_routing_name }
    relationships:
      - type: cloudify.versa.firewall_connected_to_org
        target: branch1_routing
      - type: cloudify.versa.firewall_connected_to_router
        target: parent_routing

  branch2_firewall:
    type: cloudify.versa.nodes.Firewall
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: branch2_org_name }
      policy_name: { get_input: firewall_policy_name }
      rule_name: { get_input: firewall_rule_name }
      zones:
        - trust:
            networks:
              - { get_input: branch2_network_name }
        - untrust:
            routing_instances:
              - { get_input: parent_routing_name }
    relationships:
      - type: cloudify.versa.firewall_connected_to_org
        target: branch2_routing
      - type: cloudify.versa.firewall_connected_to_router
        target: parent_routing

  #####################
  # NAT configuration
  #####################
  hq_nat:
    type: cloudify.versa.nodes.CGNat
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: hq_org_name }
      pool:
        name: { get_input: nat_pool_name }
        ranges:
          - name: { get_input: nat_range_name }
            low: { get_input: hq_range_low }
            hight: { get_input: hq_range_hight }
        routing_instance: { get_input: hq_routing_name }
        provider_org: { get_input: parent_org_name }
      rule:
        name: { get_input: nat_rule_name }
        addresses:
          - { get_input: hq_nat_rule_source_address }
    relationships:
      - type: cloudify.versa.cgnat_connected_to_org
        target: hq_associated
      - type: cloudify.versa.cgnat_connected_to_routing
        target: hq_routing

  branch1_nat:
    type: cloudify.versa.nodes.CGNat
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: branch1_org_name }
      pool:
        name: { get_input: nat_pool_name }
        ranges:
          - name: { get_input: nat_range_name }
            low: { get_input: branch1_range_low }
            hight: { get_input: branch1_range_hight }
        routing_instance: { get_input: branch1_routing_name }
        provider_org: { get_input: parent_org_name }
      rule:
        name: { get_input: nat_rule_name }
        addresses:
          - { get_input: branch1_nat_rule_source_address }
    relationships:
      - type: cloudify.versa.cgnat_connected_to_org
        target: branch1_associated
      - type: cloudify.versa.cgnat_connected_to_routing
        target: branch1_routing

  branch2_nat:
    type: cloudify.versa.nodes.CGNat
    properties:
      versa_config: { get_property: [versa_configuration, versa_config] }
      appliance_name: { get_input: appliance_name }
      org_name: { get_input: branch2_org_name }
      pool:
        name: { get_input: nat_pool_name }
        ranges:
          - name: { get_input: nat_range_name }
            low: { get_input: branch2_range_low }
            hight: { get_input: branch2_range_hight }
        routing_instance: { get_input: branch2_routing_name }
        provider_org: { get_input: parent_org_name }
      rule:
        name: { get_input: nat_rule_name }
        addresses:
          - { get_input: branch2_nat_rule_source_address }
    relationships:
      - type: cloudify.versa.cgnat_connected_to_org
        target: branch2_associated
      - type: cloudify.versa.cgnat_connected_to_routing
        target: branch2_routing
